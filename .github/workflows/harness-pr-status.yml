name: Harness Build Status Check

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [main, develop]

permissions:
  checks: write
  statuses: write
  contents: read

jobs:
  check-harness-build:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Harness Execution for PR Branch
        id: harness
        run: |
          PR_BRANCH="${{ github.head_ref }}"
          echo "🔍 Searching Harness executions for branch: $PR_BRANCH"

          RESPONSE=$(curl -s -X GET \
            "https://app.harness.io/gateway/pipeline/api/pipelines/execution/v2?accountIdentifier=${{ secrets.HARNESS_ACCOUNT_ID }}&orgIdentifier=default&projectIdentifier=fever&pipelineIdentifier=rnexpomobile&page=0&size=10&sort=startTs,desc" \
            -H "x-api-key: ${{ secrets.HARNESS_API_KEY }}")

          EXEC_ID=$(echo "$RESPONSE" | jq -r --arg BRANCH "$PR_BRANCH" '.content[] | select(.pipelineExecutionSummary.codebase.branch == $BRANCH) | .planExecutionId' | head -n 1)

          if [ -z "$EXEC_ID" ] || [ "$EXEC_ID" = "null" ]; then
            echo "❌ No matching Harness execution found for branch $PR_BRANCH"
            exit 1
          fi

          HARNESS_URL="https://app.harness.io/ng/#/account/${{ secrets.HARNESS_ACCOUNT_ID }}/ci/orgs/default/projects/fever/pipelines/rnexpomobile/executions/$EXEC_ID/pipeline"
          echo "✅ Harness execution found: $HARNESS_URL"

          echo "execution_id=$EXEC_ID" >> $GITHUB_OUTPUT
          echo "url=$HARNESS_URL" >> $GITHUB_OUTPUT

      - name: Check Harness Build Status
        id: status
        run: |
          EXEC_ID="${{ steps.harness.outputs.execution_id }}"
          MAX_WAIT=600
          INTERVAL=10
          ELAPSED=0
          while true; do
            STATUS=$(curl -s -X GET \
              "https://app.harness.io/gateway/pipeline/api/pipelines/execution/v2/$EXEC_ID?accountIdentifier=${{ secrets.HARNESS_ACCOUNT_ID }}" \
              -H "x-api-key: ${{ secrets.HARNESS_API_KEY }}" | jq -r '.pipelineExecutionSummary.status')

            if [[ "$STATUS" == "SUCCESS" || "$STATUS" == "FAILED" || "$STATUS" == "ABORTED" ]]; then
              echo "Harness build status: $STATUS"
              echo "status=$STATUS" >> $GITHUB_OUTPUT
              break
            fi

            if [ $ELAPSED -ge $MAX_WAIT ]; then
              echo "Timed out waiting for Harness execution"
              echo "status=TIMEOUT" >> $GITHUB_OUTPUT
              break
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

      - name: Set PR Commit Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const statusMap = {
              SUCCESS: 'success',
              FAILED: 'failure',
              ABORTED: 'failure',
              TIMEOUT: 'failure'
            };

            const harnessStatus = '${{ steps.status.outputs.status }}';
            const state = statusMap[harnessStatus] || 'failure';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              context: 'Harness Build',  // Must match branch protection
              description: harnessStatus === 'SUCCESS' ? 'Harness build passed' : `Harness build ${harnessStatus.toLowerCase()}`,
              target_url: '${{ steps.harness.outputs.url }}'
            });
