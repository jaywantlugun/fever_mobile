name: Validate PRs to Main Branch

on:
  pull_request:
    types: [opened, reopened, edited, synchronize, ready_for_review]
    branches: [main]

permissions:
  contents: read
  statuses: write
  pull-requests: write

jobs:
  validate-pr-source:
    name: Validate PR Source Branch
    runs-on: ubuntu-latest
    
    steps:
      # Immediate pending status
      - name: Set initial pending status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              context: 'PR Source Validation',
              description: 'Validating PR source branch...'
            });
    
      - name: Extract branch information
        id: branch-info
        run: |
          echo "pr_source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "pr_target_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          
      - name: Validate develop branch requirement
        id: validate-branch
        run: |
          if [ "${{ steps.branch-info.outputs.pr_source_branch }}" != "develop" ]; then
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Update status check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const passed = '${{ steps.validate-branch.outputs.validation_passed }}' === 'true';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: passed ? 'success' : 'failure',
              context: 'PR Source Validation',
              description: passed 
                ? 'Valid PR source branch (from develop)' 
                : 'PR must come from develop branch'
            });
            
            if (!passed) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '⚠️ **PR Rejected**\n\nPRs to `main` must originate from `develop` branch.\n\nCurrent source: `${{ github.head_ref }}`'
              });
            }